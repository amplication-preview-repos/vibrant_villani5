/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VideoBundle } from "./VideoBundle";
import { VideoBundleCountArgs } from "./VideoBundleCountArgs";
import { VideoBundleFindManyArgs } from "./VideoBundleFindManyArgs";
import { VideoBundleFindUniqueArgs } from "./VideoBundleFindUniqueArgs";
import { CreateVideoBundleArgs } from "./CreateVideoBundleArgs";
import { UpdateVideoBundleArgs } from "./UpdateVideoBundleArgs";
import { DeleteVideoBundleArgs } from "./DeleteVideoBundleArgs";
import { VideoBundleService } from "../videoBundle.service";
@graphql.Resolver(() => VideoBundle)
export class VideoBundleResolverBase {
  constructor(protected readonly service: VideoBundleService) {}

  async _videoBundlesMeta(
    @graphql.Args() args: VideoBundleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VideoBundle])
  async videoBundles(
    @graphql.Args() args: VideoBundleFindManyArgs
  ): Promise<VideoBundle[]> {
    return this.service.videoBundles(args);
  }

  @graphql.Query(() => VideoBundle, { nullable: true })
  async videoBundle(
    @graphql.Args() args: VideoBundleFindUniqueArgs
  ): Promise<VideoBundle | null> {
    const result = await this.service.videoBundle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VideoBundle)
  async createVideoBundle(
    @graphql.Args() args: CreateVideoBundleArgs
  ): Promise<VideoBundle> {
    return await this.service.createVideoBundle({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VideoBundle)
  async updateVideoBundle(
    @graphql.Args() args: UpdateVideoBundleArgs
  ): Promise<VideoBundle | null> {
    try {
      return await this.service.updateVideoBundle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VideoBundle)
  async deleteVideoBundle(
    @graphql.Args() args: DeleteVideoBundleArgs
  ): Promise<VideoBundle | null> {
    try {
      return await this.service.deleteVideoBundle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

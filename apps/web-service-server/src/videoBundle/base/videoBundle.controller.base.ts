/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VideoBundleService } from "../videoBundle.service";
import { VideoBundleCreateInput } from "./VideoBundleCreateInput";
import { VideoBundle } from "./VideoBundle";
import { VideoBundleFindManyArgs } from "./VideoBundleFindManyArgs";
import { VideoBundleWhereUniqueInput } from "./VideoBundleWhereUniqueInput";
import { VideoBundleUpdateInput } from "./VideoBundleUpdateInput";

export class VideoBundleControllerBase {
  constructor(protected readonly service: VideoBundleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VideoBundle })
  async createVideoBundle(
    @common.Body() data: VideoBundleCreateInput
  ): Promise<VideoBundle> {
    return await this.service.createVideoBundle({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        isFree: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VideoBundle] })
  @ApiNestedQuery(VideoBundleFindManyArgs)
  async videoBundles(@common.Req() request: Request): Promise<VideoBundle[]> {
    const args = plainToClass(VideoBundleFindManyArgs, request.query);
    return this.service.videoBundles({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        isFree: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VideoBundle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async videoBundle(
    @common.Param() params: VideoBundleWhereUniqueInput
  ): Promise<VideoBundle | null> {
    const result = await this.service.videoBundle({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        isFree: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VideoBundle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVideoBundle(
    @common.Param() params: VideoBundleWhereUniqueInput,
    @common.Body() data: VideoBundleUpdateInput
  ): Promise<VideoBundle | null> {
    try {
      return await this.service.updateVideoBundle({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          isFree: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VideoBundle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVideoBundle(
    @common.Param() params: VideoBundleWhereUniqueInput
  ): Promise<VideoBundle | null> {
    try {
      return await this.service.deleteVideoBundle({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          isFree: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

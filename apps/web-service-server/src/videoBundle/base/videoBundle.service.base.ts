/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, VideoBundle as PrismaVideoBundle } from "@prisma/client";

export class VideoBundleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VideoBundleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.videoBundle.count(args);
  }

  async videoBundles(
    args: Prisma.VideoBundleFindManyArgs
  ): Promise<PrismaVideoBundle[]> {
    return this.prisma.videoBundle.findMany(args);
  }
  async videoBundle(
    args: Prisma.VideoBundleFindUniqueArgs
  ): Promise<PrismaVideoBundle | null> {
    return this.prisma.videoBundle.findUnique(args);
  }
  async createVideoBundle(
    args: Prisma.VideoBundleCreateArgs
  ): Promise<PrismaVideoBundle> {
    return this.prisma.videoBundle.create(args);
  }
  async updateVideoBundle(
    args: Prisma.VideoBundleUpdateArgs
  ): Promise<PrismaVideoBundle> {
    return this.prisma.videoBundle.update(args);
  }
  async deleteVideoBundle(
    args: Prisma.VideoBundleDeleteArgs
  ): Promise<PrismaVideoBundle> {
    return this.prisma.videoBundle.delete(args);
  }
}

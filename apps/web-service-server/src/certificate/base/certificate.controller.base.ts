/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CertificateService } from "../certificate.service";
import { CertificateCreateInput } from "./CertificateCreateInput";
import { Certificate } from "./Certificate";
import { CertificateFindManyArgs } from "./CertificateFindManyArgs";
import { CertificateWhereUniqueInput } from "./CertificateWhereUniqueInput";
import { CertificateUpdateInput } from "./CertificateUpdateInput";

export class CertificateControllerBase {
  constructor(protected readonly service: CertificateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Certificate })
  async createCertificate(
    @common.Body() data: CertificateCreateInput
  ): Promise<Certificate> {
    return await this.service.createCertificate({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Certificate] })
  @ApiNestedQuery(CertificateFindManyArgs)
  async certificates(@common.Req() request: Request): Promise<Certificate[]> {
    const args = plainToClass(CertificateFindManyArgs, request.query);
    return this.service.certificates({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Certificate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async certificate(
    @common.Param() params: CertificateWhereUniqueInput
  ): Promise<Certificate | null> {
    const result = await this.service.certificate({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Certificate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCertificate(
    @common.Param() params: CertificateWhereUniqueInput,
    @common.Body() data: CertificateUpdateInput
  ): Promise<Certificate | null> {
    try {
      return await this.service.updateCertificate({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Certificate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCertificate(
    @common.Param() params: CertificateWhereUniqueInput
  ): Promise<Certificate | null> {
    try {
      return await this.service.deleteCertificate({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserAffiliateClickService } from "../userAffiliateClick.service";
import { UserAffiliateClickCreateInput } from "./UserAffiliateClickCreateInput";
import { UserAffiliateClick } from "./UserAffiliateClick";
import { UserAffiliateClickFindManyArgs } from "./UserAffiliateClickFindManyArgs";
import { UserAffiliateClickWhereUniqueInput } from "./UserAffiliateClickWhereUniqueInput";
import { UserAffiliateClickUpdateInput } from "./UserAffiliateClickUpdateInput";

export class UserAffiliateClickControllerBase {
  constructor(protected readonly service: UserAffiliateClickService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserAffiliateClick })
  async createUserAffiliateClick(
    @common.Body() data: UserAffiliateClickCreateInput
  ): Promise<UserAffiliateClick> {
    return await this.service.createUserAffiliateClick({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserAffiliateClick] })
  @ApiNestedQuery(UserAffiliateClickFindManyArgs)
  async userAffiliateClicks(
    @common.Req() request: Request
  ): Promise<UserAffiliateClick[]> {
    const args = plainToClass(UserAffiliateClickFindManyArgs, request.query);
    return this.service.userAffiliateClicks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserAffiliateClick })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userAffiliateClick(
    @common.Param() params: UserAffiliateClickWhereUniqueInput
  ): Promise<UserAffiliateClick | null> {
    const result = await this.service.userAffiliateClick({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserAffiliateClick })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserAffiliateClick(
    @common.Param() params: UserAffiliateClickWhereUniqueInput,
    @common.Body() data: UserAffiliateClickUpdateInput
  ): Promise<UserAffiliateClick | null> {
    try {
      return await this.service.updateUserAffiliateClick({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserAffiliateClick })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserAffiliateClick(
    @common.Param() params: UserAffiliateClickWhereUniqueInput
  ): Promise<UserAffiliateClick | null> {
    try {
      return await this.service.deleteUserAffiliateClick({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserAffiliateClick as PrismaUserAffiliateClick,
} from "@prisma/client";

export class UserAffiliateClickServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserAffiliateClickCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userAffiliateClick.count(args);
  }

  async userAffiliateClicks(
    args: Prisma.UserAffiliateClickFindManyArgs
  ): Promise<PrismaUserAffiliateClick[]> {
    return this.prisma.userAffiliateClick.findMany(args);
  }
  async userAffiliateClick(
    args: Prisma.UserAffiliateClickFindUniqueArgs
  ): Promise<PrismaUserAffiliateClick | null> {
    return this.prisma.userAffiliateClick.findUnique(args);
  }
  async createUserAffiliateClick(
    args: Prisma.UserAffiliateClickCreateArgs
  ): Promise<PrismaUserAffiliateClick> {
    return this.prisma.userAffiliateClick.create(args);
  }
  async updateUserAffiliateClick(
    args: Prisma.UserAffiliateClickUpdateArgs
  ): Promise<PrismaUserAffiliateClick> {
    return this.prisma.userAffiliateClick.update(args);
  }
  async deleteUserAffiliateClick(
    args: Prisma.UserAffiliateClickDeleteArgs
  ): Promise<PrismaUserAffiliateClick> {
    return this.prisma.userAffiliateClick.delete(args);
  }
}

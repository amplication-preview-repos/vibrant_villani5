/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserVideoPurchaseService } from "../userVideoPurchase.service";
import { UserVideoPurchaseCreateInput } from "./UserVideoPurchaseCreateInput";
import { UserVideoPurchase } from "./UserVideoPurchase";
import { UserVideoPurchaseFindManyArgs } from "./UserVideoPurchaseFindManyArgs";
import { UserVideoPurchaseWhereUniqueInput } from "./UserVideoPurchaseWhereUniqueInput";
import { UserVideoPurchaseUpdateInput } from "./UserVideoPurchaseUpdateInput";

export class UserVideoPurchaseControllerBase {
  constructor(protected readonly service: UserVideoPurchaseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserVideoPurchase })
  async createUserVideoPurchase(
    @common.Body() data: UserVideoPurchaseCreateInput
  ): Promise<UserVideoPurchase> {
    return await this.service.createUserVideoPurchase({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserVideoPurchase] })
  @ApiNestedQuery(UserVideoPurchaseFindManyArgs)
  async userVideoPurchases(
    @common.Req() request: Request
  ): Promise<UserVideoPurchase[]> {
    const args = plainToClass(UserVideoPurchaseFindManyArgs, request.query);
    return this.service.userVideoPurchases({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserVideoPurchase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userVideoPurchase(
    @common.Param() params: UserVideoPurchaseWhereUniqueInput
  ): Promise<UserVideoPurchase | null> {
    const result = await this.service.userVideoPurchase({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserVideoPurchase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserVideoPurchase(
    @common.Param() params: UserVideoPurchaseWhereUniqueInput,
    @common.Body() data: UserVideoPurchaseUpdateInput
  ): Promise<UserVideoPurchase | null> {
    try {
      return await this.service.updateUserVideoPurchase({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserVideoPurchase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserVideoPurchase(
    @common.Param() params: UserVideoPurchaseWhereUniqueInput
  ): Promise<UserVideoPurchase | null> {
    try {
      return await this.service.deleteUserVideoPurchase({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserCertificate as PrismaUserCertificate,
} from "@prisma/client";

export class UserCertificateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserCertificateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userCertificate.count(args);
  }

  async userCertificates(
    args: Prisma.UserCertificateFindManyArgs
  ): Promise<PrismaUserCertificate[]> {
    return this.prisma.userCertificate.findMany(args);
  }
  async userCertificate(
    args: Prisma.UserCertificateFindUniqueArgs
  ): Promise<PrismaUserCertificate | null> {
    return this.prisma.userCertificate.findUnique(args);
  }
  async createUserCertificate(
    args: Prisma.UserCertificateCreateArgs
  ): Promise<PrismaUserCertificate> {
    return this.prisma.userCertificate.create(args);
  }
  async updateUserCertificate(
    args: Prisma.UserCertificateUpdateArgs
  ): Promise<PrismaUserCertificate> {
    return this.prisma.userCertificate.update(args);
  }
  async deleteUserCertificate(
    args: Prisma.UserCertificateDeleteArgs
  ): Promise<PrismaUserCertificate> {
    return this.prisma.userCertificate.delete(args);
  }
}

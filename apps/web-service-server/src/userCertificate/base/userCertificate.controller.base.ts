/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserCertificateService } from "../userCertificate.service";
import { UserCertificateCreateInput } from "./UserCertificateCreateInput";
import { UserCertificate } from "./UserCertificate";
import { UserCertificateFindManyArgs } from "./UserCertificateFindManyArgs";
import { UserCertificateWhereUniqueInput } from "./UserCertificateWhereUniqueInput";
import { UserCertificateUpdateInput } from "./UserCertificateUpdateInput";

export class UserCertificateControllerBase {
  constructor(protected readonly service: UserCertificateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserCertificate })
  async createUserCertificate(
    @common.Body() data: UserCertificateCreateInput
  ): Promise<UserCertificate> {
    return await this.service.createUserCertificate({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserCertificate] })
  @ApiNestedQuery(UserCertificateFindManyArgs)
  async userCertificates(
    @common.Req() request: Request
  ): Promise<UserCertificate[]> {
    const args = plainToClass(UserCertificateFindManyArgs, request.query);
    return this.service.userCertificates({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserCertificate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userCertificate(
    @common.Param() params: UserCertificateWhereUniqueInput
  ): Promise<UserCertificate | null> {
    const result = await this.service.userCertificate({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserCertificate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserCertificate(
    @common.Param() params: UserCertificateWhereUniqueInput,
    @common.Body() data: UserCertificateUpdateInput
  ): Promise<UserCertificate | null> {
    try {
      return await this.service.updateUserCertificate({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserCertificate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserCertificate(
    @common.Param() params: UserCertificateWhereUniqueInput
  ): Promise<UserCertificate | null> {
    try {
      return await this.service.deleteUserCertificate({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VideoCategoryService } from "../videoCategory.service";
import { VideoCategoryCreateInput } from "./VideoCategoryCreateInput";
import { VideoCategory } from "./VideoCategory";
import { VideoCategoryFindManyArgs } from "./VideoCategoryFindManyArgs";
import { VideoCategoryWhereUniqueInput } from "./VideoCategoryWhereUniqueInput";
import { VideoCategoryUpdateInput } from "./VideoCategoryUpdateInput";

export class VideoCategoryControllerBase {
  constructor(protected readonly service: VideoCategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VideoCategory })
  async createVideoCategory(
    @common.Body() data: VideoCategoryCreateInput
  ): Promise<VideoCategory> {
    return await this.service.createVideoCategory({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VideoCategory] })
  @ApiNestedQuery(VideoCategoryFindManyArgs)
  async videoCategories(
    @common.Req() request: Request
  ): Promise<VideoCategory[]> {
    const args = plainToClass(VideoCategoryFindManyArgs, request.query);
    return this.service.videoCategories({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VideoCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async videoCategory(
    @common.Param() params: VideoCategoryWhereUniqueInput
  ): Promise<VideoCategory | null> {
    const result = await this.service.videoCategory({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VideoCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVideoCategory(
    @common.Param() params: VideoCategoryWhereUniqueInput,
    @common.Body() data: VideoCategoryUpdateInput
  ): Promise<VideoCategory | null> {
    try {
      return await this.service.updateVideoCategory({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VideoCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVideoCategory(
    @common.Param() params: VideoCategoryWhereUniqueInput
  ): Promise<VideoCategory | null> {
    try {
      return await this.service.deleteVideoCategory({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

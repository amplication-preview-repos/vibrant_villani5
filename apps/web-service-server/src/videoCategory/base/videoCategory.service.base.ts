/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, VideoCategory as PrismaVideoCategory } from "@prisma/client";

export class VideoCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VideoCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.videoCategory.count(args);
  }

  async videoCategories(
    args: Prisma.VideoCategoryFindManyArgs
  ): Promise<PrismaVideoCategory[]> {
    return this.prisma.videoCategory.findMany(args);
  }
  async videoCategory(
    args: Prisma.VideoCategoryFindUniqueArgs
  ): Promise<PrismaVideoCategory | null> {
    return this.prisma.videoCategory.findUnique(args);
  }
  async createVideoCategory(
    args: Prisma.VideoCategoryCreateArgs
  ): Promise<PrismaVideoCategory> {
    return this.prisma.videoCategory.create(args);
  }
  async updateVideoCategory(
    args: Prisma.VideoCategoryUpdateArgs
  ): Promise<PrismaVideoCategory> {
    return this.prisma.videoCategory.update(args);
  }
  async deleteVideoCategory(
    args: Prisma.VideoCategoryDeleteArgs
  ): Promise<PrismaVideoCategory> {
    return this.prisma.videoCategory.delete(args);
  }
}

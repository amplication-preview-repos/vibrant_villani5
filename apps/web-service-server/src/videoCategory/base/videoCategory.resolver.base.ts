/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VideoCategory } from "./VideoCategory";
import { VideoCategoryCountArgs } from "./VideoCategoryCountArgs";
import { VideoCategoryFindManyArgs } from "./VideoCategoryFindManyArgs";
import { VideoCategoryFindUniqueArgs } from "./VideoCategoryFindUniqueArgs";
import { DeleteVideoCategoryArgs } from "./DeleteVideoCategoryArgs";
import { VideoCategoryService } from "../videoCategory.service";
@graphql.Resolver(() => VideoCategory)
export class VideoCategoryResolverBase {
  constructor(protected readonly service: VideoCategoryService) {}

  async _videoCategoriesMeta(
    @graphql.Args() args: VideoCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VideoCategory])
  async videoCategories(
    @graphql.Args() args: VideoCategoryFindManyArgs
  ): Promise<VideoCategory[]> {
    return this.service.videoCategories(args);
  }

  @graphql.Query(() => VideoCategory, { nullable: true })
  async videoCategory(
    @graphql.Args() args: VideoCategoryFindUniqueArgs
  ): Promise<VideoCategory | null> {
    const result = await this.service.videoCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VideoCategory)
  async deleteVideoCategory(
    @graphql.Args() args: DeleteVideoCategoryArgs
  ): Promise<VideoCategory | null> {
    try {
      return await this.service.deleteVideoCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

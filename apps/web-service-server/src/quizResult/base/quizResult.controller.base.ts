/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QuizResultService } from "../quizResult.service";
import { QuizResultCreateInput } from "./QuizResultCreateInput";
import { QuizResult } from "./QuizResult";
import { QuizResultFindManyArgs } from "./QuizResultFindManyArgs";
import { QuizResultWhereUniqueInput } from "./QuizResultWhereUniqueInput";
import { QuizResultUpdateInput } from "./QuizResultUpdateInput";

export class QuizResultControllerBase {
  constructor(protected readonly service: QuizResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuizResult })
  async createQuizResult(
    @common.Body() data: QuizResultCreateInput
  ): Promise<QuizResult> {
    return await this.service.createQuizResult({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuizResult] })
  @ApiNestedQuery(QuizResultFindManyArgs)
  async quizResults(@common.Req() request: Request): Promise<QuizResult[]> {
    const args = plainToClass(QuizResultFindManyArgs, request.query);
    return this.service.quizResults({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuizResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async quizResult(
    @common.Param() params: QuizResultWhereUniqueInput
  ): Promise<QuizResult | null> {
    const result = await this.service.quizResult({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuizResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQuizResult(
    @common.Param() params: QuizResultWhereUniqueInput,
    @common.Body() data: QuizResultUpdateInput
  ): Promise<QuizResult | null> {
    try {
      return await this.service.updateQuizResult({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuizResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQuizResult(
    @common.Param() params: QuizResultWhereUniqueInput
  ): Promise<QuizResult | null> {
    try {
      return await this.service.deleteQuizResult({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

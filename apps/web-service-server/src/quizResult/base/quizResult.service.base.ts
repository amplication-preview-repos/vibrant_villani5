/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, QuizResult as PrismaQuizResult } from "@prisma/client";

export class QuizResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuizResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.quizResult.count(args);
  }

  async quizResults(
    args: Prisma.QuizResultFindManyArgs
  ): Promise<PrismaQuizResult[]> {
    return this.prisma.quizResult.findMany(args);
  }
  async quizResult(
    args: Prisma.QuizResultFindUniqueArgs
  ): Promise<PrismaQuizResult | null> {
    return this.prisma.quizResult.findUnique(args);
  }
  async createQuizResult(
    args: Prisma.QuizResultCreateArgs
  ): Promise<PrismaQuizResult> {
    return this.prisma.quizResult.create(args);
  }
  async updateQuizResult(
    args: Prisma.QuizResultUpdateArgs
  ): Promise<PrismaQuizResult> {
    return this.prisma.quizResult.update(args);
  }
  async deleteQuizResult(
    args: Prisma.QuizResultDeleteArgs
  ): Promise<PrismaQuizResult> {
    return this.prisma.quizResult.delete(args);
  }
}

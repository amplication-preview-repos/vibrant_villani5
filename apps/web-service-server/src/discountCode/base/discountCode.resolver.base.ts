/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DiscountCode } from "./DiscountCode";
import { DiscountCodeCountArgs } from "./DiscountCodeCountArgs";
import { DiscountCodeFindManyArgs } from "./DiscountCodeFindManyArgs";
import { DiscountCodeFindUniqueArgs } from "./DiscountCodeFindUniqueArgs";
import { DeleteDiscountCodeArgs } from "./DeleteDiscountCodeArgs";
import { DiscountCodeService } from "../discountCode.service";
@graphql.Resolver(() => DiscountCode)
export class DiscountCodeResolverBase {
  constructor(protected readonly service: DiscountCodeService) {}

  async _discountCodesMeta(
    @graphql.Args() args: DiscountCodeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DiscountCode])
  async discountCodes(
    @graphql.Args() args: DiscountCodeFindManyArgs
  ): Promise<DiscountCode[]> {
    return this.service.discountCodes(args);
  }

  @graphql.Query(() => DiscountCode, { nullable: true })
  async discountCode(
    @graphql.Args() args: DiscountCodeFindUniqueArgs
  ): Promise<DiscountCode | null> {
    const result = await this.service.discountCode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DiscountCode)
  async deleteDiscountCode(
    @graphql.Args() args: DeleteDiscountCodeArgs
  ): Promise<DiscountCode | null> {
    try {
      return await this.service.deleteDiscountCode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
